import type { Area } from "./Area"
import type { Dungeon } from "./Dungeon"
import type { Tile, TileMap } from "./Tile"

import Fn from "Function"
import List from "List"
import String from "String"
import Terminal from "Terminal"

import { Area, anyAreaContainsPoint, isBoundary } from "./Area"
import { Dungeon } from "./Dungeon"
import { hex } from "./String"
import { Tile, TileFloor, TileWall, walkTileMap } from "./Tile"



export BLUE_HASH = Terminal.text.blue("#")
export GREEN_HASH = Terminal.text.green("#")
export RED_HASH = Terminal.text.red("#")
export YELLOW_HASH = Terminal.text.yellow("#")
export WHITE_HASH = Terminal.text.white("#")

renderBoundary :: (String -> String) -> Integer -> String
export renderBoundary = (fn, i) => pipe(
  hex,
  fn,
)(i)

renderTile :: Integer -> Integer -> Tile -> String
export renderTile = (stageWidth, stageHeight, tile) => where(tile) {
  Tile(tk, tx, ty) =>
    (
      tk == TileFloor
        ? " "
        : tk == TileWall && isBoundary(0, 0, stageWidth, stageHeight, tx, ty)
          ? ty == 0
            ? renderBoundary(Terminal.text.green, tx)
            : renderBoundary(Terminal.text.yellow, ty)
          : "#"
    )
}

renderFinalLine :: Integer -> String -> String
renderFinalLine = (h, r) => r
    ++ RED_HASH
    ++ "\n"
    ++ pipe(
      List.range(0),
      map(Fn.always(RED_HASH)),
      String.join(""),
    )(h)
    ++ RED_HASH

renderRooms :: Integer -> Integer -> TileMap -> List String
renderRooms = (w, h, tiles) => pipe(
  walkTileMap(renderTile(w, h)),
  map(String.join("")),
)(tiles)

render :: Dungeon -> String
export render = pipe(
  where {
    Dungeon(_, w, h, tiles, areas) =>
      pipe(
        renderRooms(w, h),
        String.join(RED_HASH ++ "\n"),
        renderFinalLine(h),
      )(tiles)
  },
)
