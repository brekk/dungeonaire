import type { Area } from "./Area"

import { assertEquals, test } from "Test"

import { Area, Box } from "./Area"
import {
  anyAreaContainsPoint,
  anyAreaIntersectsArea,
  areaContainsPoint,
  areaIntersectsArea,
  getBoundingBox,
  isBoundary,
  isEdge,
} from "./Area"



test(
  "areaIntersectsArea - yes",
  () => {
    a = Area(1, 1, 10, 10)
    return assertEquals(true, areaIntersectsArea(a, a))
  },
)
test(
  "areaIntersectsArea - no",
  () => {
    a = Area(1, 1, 10, 10)
    b = Area(-100, 1, 2, 2)
    return assertEquals(false, areaIntersectsArea(a, b))
  },
)

test(
  "getBoundingBox",
  () => {
    a = Area(-5, -5, 10, 10)
    return assertEquals(getBoundingBox(a), Box(-5, 5, 5, -5))
  },
)

test(
  "areaContainsPoint - yes",
  () => assertEquals(true, areaContainsPoint(Area(0, 0, 10, 10), 1, 1)),
)

test(
  "areaContainsPoint - no",
  () => assertEquals(false, areaContainsPoint(Area(0, 0, 10, 10), 11, 11)),
)

test(
  "anyAreaIntersectsArea - yes",
  () => assertEquals(true, anyAreaIntersectsArea([Area(0, 0, 5, 5)], Area(0, 0, 5, 5))),
)

test(
  "anyAreaIntersectsArea - no",
  () => assertEquals(false, anyAreaIntersectsArea([Area(0, 0, 5, 5)], Area(100, 100, 5, 5))),
)

test(
  "anyAreaContainsPoint - yes",
  () => assertEquals(true, anyAreaContainsPoint([Area(0, 0, 5, 5)], 1, 1)),
)

test(
  "anyAreaContainsPoint - no",
  () => assertEquals(false, anyAreaContainsPoint([Area(0, 0, 5, 5)], 100, 100)),
)

test("isEdge - yes", () => assertEquals(true, isEdge(0, 10, 10)))

test("isEdge - no", () => assertEquals(false, isEdge(0, 10, 4)))

test(
  "isBoundary - yes",
  () => assertEquals(true, isBoundary(getBoundingBox(Area(0, 0, 10, 10)), 0, 0)),
)
