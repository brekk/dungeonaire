import type { Maybe } from "Maybe"

import type { Area } from "./Area"
import type { Seed } from "./LCG"

import Fn from "Function"
import List from "List"
import { Just, Nothing } from "Maybe"
import Terminal from "Terminal"

import { Area, anyAreaContainsPoint, isBoundary } from "./Area"
import { hex } from "./String"



export type TileType = TileWall | TileFloor | TileDoor | TileHazard | TileVoid

// type x y
export type Tile = Tile(TileType, Integer, Integer)

export alias TileMap = List (List Tile)


export alias Neighbors = {
  e :: Maybe Tile,
  n :: Maybe Tile,
  ne :: Maybe Tile,
  nw :: Maybe Tile,
  s :: Maybe Tile,
  se :: Maybe Tile,
  sw :: Maybe Tile,
  w :: Maybe Tile,
}

atIndex :: TileMap -> Integer -> Integer -> Maybe Tile
export atIndex = (tileMap, x, y) => pipe(
  List.nth(x),
  where {
    Just(xs) =>
      List.nth(y, xs)

    Nothing =>
      Nothing
  },
)(tileMap)

makeTileMap :: Integer -> Integer -> TileMap
export makeTileMap = (height, width) => pipe(
  List.range(0),
  map(
    (x) => pipe(
      List.range(0),
      map((y) => Tile(TileWall, x, y)),
    )(height),
  ),
)(width)

getNeighbors :: TileMap -> Integer -> Integer -> Neighbors
export getNeighbors = (tiles, x, y) => {
  at = atIndex(tiles)
  return {
    e: at(x + 1, y),
    n: at(x, y - 1),
    ne: at(x + 1, y - 1),
    nw: at(x - 1, y - 1),
    s: at(x, y + 1),
    se: at(x + 1, y + 1),
    sw: at(x - 1, y + 1),
    w: at(x - 1, y),
  }
}

renderBoundary :: (String -> String) -> Integer -> String
export renderBoundary = (fn, i) => pipe(
  hex,
  fn,
)(i)

renderTile :: Integer -> Integer -> List Area -> Tile -> String
export renderTile = (stageWidth, stageHeight, areas, tile) => where(tile) {
  Tile(tk, tx, ty) =>
    Fn.ifElse(
      anyAreaContainsPoint(areas, tx),
      Fn.always("/"),
      (_) => (
        tk == TileWall && isBoundary(0, 0, stageWidth, stageHeight, tx, ty)
          ? ty == 0
            ? renderBoundary(Terminal.text.green, tx)
            : renderBoundary(Terminal.text.yellow, ty)
          : "#"
      ),
    )(ty)
}
