import type { Maybe } from "Maybe"

import List from "List"
import { Just, Nothing, isJust } from "Maybe"



export type TileType = TileWall | TileFloor | TileDoor | TileHazard | TileVoid

// type x y
export type Tile = Tile(TileType, Integer, Integer)

export alias TileMap = List (List Tile)

export alias Neighbors = {
  e :: Maybe Tile,
  n :: Maybe Tile,
  ne :: Maybe Tile,
  nw :: Maybe Tile,
  s :: Maybe Tile,
  se :: Maybe Tile,
  sw :: Maybe Tile,
  w :: Maybe Tile,
}

export alias CardinalNeighbors = {
  e :: Maybe Tile,
  n :: Maybe Tile,
  s :: Maybe Tile,
  w :: Maybe Tile,
}

walkTileMap :: (Tile -> a) -> TileMap -> List (List a)
export walkTileMap = (fn, tiles) => List.reduce(
  (agg, rows) => List.append(map(fn, rows), agg),
  [],
  tiles,
)

atIndex :: TileMap -> Integer -> Integer -> Maybe Tile
export atIndex = (tileMap, x, y) => pipe(
  List.nth(x),
  where {
    Just(xs) =>
      List.nth(y, xs)

    Nothing =>
      Nothing
  },
)(tileMap)

makeTileMap :: Integer -> Integer -> TileMap
export makeTileMap = (height, width) => pipe(
  List.range(0),
  map(
    (x) => pipe(
      List.range(0),
      map((y) => Tile(TileWall, x, y)),
    )(height),
  ),
)(width)

getNeighbors :: TileMap -> Integer -> Integer -> Neighbors
export getNeighbors = (tiles, x, y) => {
  at = atIndex(tiles)
  return {
    e: at(x + 1, y),
    n: at(x, y - 1),
    ne: at(x + 1, y - 1),
    nw: at(x - 1, y - 1),
    s: at(x, y + 1),
    se: at(x + 1, y + 1),
    sw: at(x - 1, y + 1),
    w: at(x - 1, y),
  }
}

getCardinalNeighbors :: TileMap -> Integer -> Integer -> CardinalNeighbors
export getCardinalNeighbors = (tiles, x, y) => {
  at = atIndex(tiles)
  return { e: at(x + 1, y), n: at(x, y - 1), s: at(x, y + 1), w: at(x - 1, y) }
}

getPossibleCardinalPaths :: TileMap -> Integer -> Integer -> List (Maybe Tile)
export getPossibleCardinalPaths = (tiles, x, y) => pipe(
  getCardinalNeighbors(tiles, x),
  (c) => [c.e, c.n, c.s, c.w],
  List.filter(isJust),
)(y)
