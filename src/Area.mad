import Fn from "Function"
import IO from "IO"
import {} from "List"



// x y width height
export type Area = Area(Integer, Integer, Integer, Integer)

// top right bottom left
export type BoundingBox = Box(Integer, Integer, Integer, Integer)


getBoundingBox :: Area -> BoundingBox
export getBoundingBox = (area) => where(area) {
  Area(x, y, w, h) =>
    Box(y, x + w, y + h, x)
}

areaContainsPoint :: Area -> Integer -> Integer -> Boolean
export areaContainsPoint = (area, x, y) => pipe(
  getBoundingBox,
  where {
    Box(t, r, b, l) =>
      !(x < l || x > r || y < t || y > b)
  },
)(area)

areaIntersectsArea :: Area -> Area -> Boolean
export areaIntersectsArea = (j, k) => {
  jj = getBoundingBox(j)
  kk = getBoundingBox(k)
  return where(#[jj, kk]) {
    #[Box(t, r, b, l), Box(t2, r2, b2, l2)] =>
      !(l2 > r || r2 < l || t2 > b || b2 < t)
  }
}

anyAreaIntersectsArea :: List Area -> Area -> Boolean
export anyAreaIntersectsArea = (areas, r) => Fn.any((area) => areaIntersectsArea(area, r), areas)

anyAreaContainsPoint :: List Area -> Integer -> Integer -> Boolean
export anyAreaContainsPoint = (areas, x, y) => Fn.any(areaContainsPoint($, x, y))(areas)

isEdge :: Integer -> Integer -> Integer -> Boolean
export isEdge = (min, max, point) => point == min || point == max

isBoundary :: BoundingBox -> Integer -> Integer -> Boolean
export isBoundary = (box, x, y) => pipe(
  where {
    Box(t, r, b, l) =>
      isEdge(t, b, y) || isEdge(r, l, x)
  },
)(box)
