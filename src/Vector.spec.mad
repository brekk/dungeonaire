import type { Vector } from "./Vector"

import IO from "IO"
import { assertEquals, test } from "Test"

import {
  Vector,
  add,
  addScalar,
  addScalarX,
  addScalarY,
  combineVectors,
  cross,
  distance,
  distanceX,
  distanceY,
  divide,
  divideScalar,
  divideScalarX,
  divideScalarY,
  dot,
  equals,
  getMagnitude,
  horizontalAngle,
  horizontalDegree,
  invert,
  invertX,
  invertY,
  isZero,
  length,
  limit,
  magnitude,
  mix,
  mixX,
  mixY,
  multiply,
  multiplyScalar,
  multiplyScalarX,
  multiplyScalarY,
  multiplyX,
  multiplyY,
  normalize,
  projectOnto,
  rotate,
  rotateBy,
  rotateByDeg,
  rotateDeg,
  rotateTo,
  rotateToDeg,
  squareDistance,
  toTuple,
  transform,
  unfloat,
  verticalAngle,
  verticalDegree,
  zero,
} from "./Vector"



test("toTuple", () => assertEquals(#[10, 4], toTuple(Vector(10, 4))))
test(
  "transform",
  () => assertEquals(Vector(4, 4), transform((x, y) => Vector(x * 2, y * 2), Vector(2, 2))),
)
test(
  "combineVectors",
  () => assertEquals(
    Vector(4, 4),
    combineVectors((x, y, x2, y2) => Vector(x + x2, y + y2), Vector(1, 1), Vector(3, 3)),
  ),
)
test("add", () => assertEquals(Vector(3, 3), add(Vector(1, 1), Vector(2, 2))))
test("divide", () => assertEquals(Vector(3, 3), divide(Vector(9, 9), Vector(3, 3))))
test("multiply", () => assertEquals(Vector(2, 4), multiply(Vector(2, 2), Vector(1, 2))))

test("addScalar", () => assertEquals(Vector(3, 3), addScalar(1, Vector(2, 2))))
test("addScalarX", () => assertEquals(Vector(3, 2), addScalarX(1, Vector(2, 2))))
test("addScalarY", () => assertEquals(Vector(2, 3), addScalarY(1, Vector(2, 2))))

test("divideScalar", () => assertEquals(Vector(3, 3), divideScalar(3, Vector(9, 9))))
test("divideScalar by zero", () => assertEquals(Vector(0, 0), divideScalar(0, Vector(9, 9))))
test("divideScalarX", () => assertEquals(Vector(3, 9), divideScalarX(3, Vector(9, 9))))
test("divideScalarX by zero", () => assertEquals(Vector(0, 9), divideScalarX(0, Vector(9, 9))))
test("divideScalarY", () => assertEquals(Vector(9, 3), divideScalarY(3, Vector(9, 9))))
test("divideScalarY by zero", () => assertEquals(Vector(9, 0), divideScalarY(0, Vector(9, 9))))

test("multiplyScalar", () => assertEquals(Vector(3, 3), multiplyScalar(3, Vector(1, 1))))
test("multiplyScalarX", () => assertEquals(Vector(9, 3), multiplyScalarX(3, Vector(3, 3))))
test("multiplyScalarY", () => assertEquals(Vector(3, 9), multiplyScalarY(3, Vector(3, 3))))
test("multiplyX", () => assertEquals(Vector(4, 1), multiplyX(Vector(2, 1), Vector(2, 1))))
test("multiplyY", () => assertEquals(Vector(1, 4), multiplyY(Vector(1, 4), Vector(2, 1))))

test("invertX", () => assertEquals(Vector(-3, 2), invertX(Vector(3, 2))))
test("invertY", () => assertEquals(Vector(3, -2), invertY(Vector(3, 2))))
test("invert", () => assertEquals(Vector(10, -10), invert(Vector(-10, 10))))
test("getMagnitude", () => assertEquals(144, getMagnitude(3, 4)))
test("magnitude", () => assertEquals(144, magnitude(Vector(4, 3))))
test("length", () => assertEquals(12, length(Vector(3, 4))))
test("normalize", () => assertEquals(Vector(1 / 4, 1 / 3), normalize(Vector(3, 4))))
test("normalize - zero", () => assertEquals(Vector(1, 0), normalize(Vector(3, 0))))
test("limit - over", () => assertEquals(Vector(16, 20), limit(2.0, 4.0, Vector(4, 5))))
test("limit - under", () => assertEquals(Vector(4, 5), limit(6.0, 4.0, Vector(4, 5))))
test("unfloat", () => assertEquals(Vector(4, 2), unfloat(Vector(4.29292, 1.872828))))
test("mixX", () => assertEquals(Vector(-17, 5), mixX(20, Vector(3, 5), Vector(2, 7))))
test("mixY", () => assertEquals(Vector(3, 45), mixY(20, Vector(3, 5), Vector(2, 7))))
test("mix", () => assertEquals(Vector(-17, 45), mix(20, Vector(3, 5), Vector(2, 7))))
test("zero", () => assertEquals(Vector(0, 0), zero(Vector(200, 2929))))
test("isZero", () => assertEquals(true, isZero(Vector(0, 0))))
test("distanceX", () => assertEquals(-4, distanceX(Vector(0, 0), Vector(4, 0))))
test("distanceY", () => assertEquals(-4, distanceY(Vector(0, 5), Vector(4, 9))))
test("squareDistance", () => assertEquals(32, squareDistance(Vector(1, 3), Vector(5, 7))))
test("distance", () => assertEquals(9.899494936611665, distance(Vector(0, 0), Vector(7, 7))))
test("equals", () => assertEquals(true, equals(Vector(1212, 0), Vector(1212, 0))))
test("dot", () => assertEquals(150, dot(Vector(1, 7), Vector(17, 19))))
test("cross", () => assertEquals(-100, cross(Vector(1, 7), Vector(17, 19))))
test("projectOnto", () => assertEquals(Vector(0.72, 5.04), projectOnto(Vector(1, 5), Vector(1, 7))))

// fenced functions (which currently fail in some contexts (--coverage)
test("horizontalAngle", () => assertEquals(0.16514867741462683, horizontalAngle(Vector(90, 15))))
test("horizontalDegree", () => assertEquals(9.462322208025617, horizontalDegree(Vector(90, 15))))
test("verticalAngle", () => assertEquals(1.4056476493802699, verticalAngle(Vector(90, 15))))
test("verticalDegree", () => assertEquals(80.53767779197439, verticalDegree(Vector(90, 15))))
test(
  "rotate",
  () => assertEquals(Vector(0.8301359341482772, -43.55813212628425), rotate(10, Vector(23, 37))),
)
test(
  "rotateDeg",
  () => assertEquals(Vector(16.225595745604366, 40.43179494779109), rotateDeg(10, Vector(23, 37))),
)
test(
  "rotateTo",
  () => assertEquals(Vector(-36.55502532704509, -23.700846468830854), rotateTo(10, Vector(23, 37))),
)
test(
  "rotateToDeg",
  () => assertEquals(Vector(9.850481768820888, 18.99915811087763), rotateToDeg(10, Vector(13, 17))),
)
test(
  "rotateBy",
  () => assertEquals(
    Vector(-9.108453855253448, 19.36584798986914),
    rotateByDeg(10, Vector(13, 17)),
  ),
)
test(
  "rotateByDeg",
  () => assertEquals(
    Vector(-5.69216934036336, 16.049897451405332),
    rotateByDeg(10, Vector(11, 13)),
  ),
)
